import Foundation
import AVFoundation
// import VoiceActivityDetector   // ‚Üê ÂâäÈô§
import Accelerate

// private let vad = ...          // ‚Üê ÂâäÈô§

protocol AudioEngineRecorderDelegate: AnyObject {
    func recorder(_ rec: AudioEngineRecorder,
                  didFinishSegment url: URL,
                  start: Date)
}

final class AudioEngineRecorder: ObservableObject {
    // MARK: Public
    @Published var isRecording = false
    weak var delegate: AudioEngineRecorderDelegate?

    // MARK: ‚Äì‚Äì‚Äì‚Äì‚Äì Private ‚Äì‚Äì‚Äì‚Äì‚Äì
    private let silenceWindow   = 1.2
    private let minSegmentBytes = 12_288
    private let silenceThreshold: Float = 0.01 // ‚óÄÔ∏é‚óÄÔ∏é ÁÑ°Èü≥„Å®Âà§ÂÆö„Åô„ÇãRMSÂÄ§„ÅÆÈñæÂÄ§ÔºàË¶ÅË™øÊï¥Ôºâ

    private var isSpeaking  = false
    private var silenceStart: Date?
    private var audioFile:  AVAudioFile?
    private var fileURL:    URL?
    private var startDate   = Date()
    private let engine = AVAudioEngine() // ‚óÄÔ∏é‚óÄÔ∏é „Ç§„É≥„Çπ„Çø„É≥„ÇπÂåñ

    // MARK: - ÂàùÊúüÂåñ ------------------------------------------------
    init() {
        let session = AVAudioSession.sharedInstance()
        try? session.setCategory(.playAndRecord,
                                 mode: .measurement,
                                 options: [.defaultToSpeaker, .allowBluetooth])
        try? session.setActive(true)
    }

    func start() throws {
        guard !isRecording else { return }

        try AVAudioSession.sharedInstance().setCategory(
            .playAndRecord,
            mode: .default,
            options: .defaultToSpeaker)
        try AVAudioSession.sharedInstance().setActive(true)

        let input  = engine.inputNode
        let format = input.inputFormat(forBus: 0)
        input.removeTap(onBus: 0)

        // Tap„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„ÄÅRMS„ÅßÈü≥Â£∞Âå∫Èñì„ÇíÂà§ÂÆö
        input.installTap(onBus: 0, bufferSize: 1024, format: format) { [weak self] buffer, _ in
            self?.processAudio(buffer) // ‚óÄÔ∏é‚óÄÔ∏é Â§âÊõ¥: RMS„Éô„Éº„Çπ„ÅÆÂá¶ÁêÜ„ÇíÂëº„Å∂
        }

        engine.prepare()
        try engine.start()

        startDate = Date()
        isRecording = true
    }

    func stop() {
        guard isRecording else { return }
        engine.inputNode.removeTap(onBus: 0)
        engine.stop()
        finalizeSegment()
        isRecording = false
    }

    /// RMSÂÄ§„ÅßÈü≥Â£∞Âå∫Èñì„ÇíÂà§ÂÆö„Åó„Çª„Ç∞„É°„É≥„Éà„ÇíÂàá„ÇäÂá∫„Åô
    private func processAudio(_ buffer: AVAudioPCMBuffer) {
        let rms = buffer.rmsMagnitude() // RMSÂÄ§„ÇíÂèñÂæó
        let now = Date()

        Debug.log(String(format: "üéôÔ∏è RMS = %.5f", rms)) // „É≠„Ç∞Âá∫Âäõ

        // ÈñæÂÄ§„ÇíË∂Ö„Åà„Åü„Çâ„ÄåÁô∫Ë©±‰∏≠„Äç„Å®„Åø„Å™„Åô
        let isVoice = rms > silenceThreshold

        if isVoice {
            // ‚îÄ Áô∫Ë©±Á∂ôÁ∂ö ‚îÄ
            if audioFile == nil {
                openNewSegment(format: buffer.format) // Êñ∞Ë¶è„Çª„Ç∞„É°„É≥„ÉàÈñãÂßã
            }
            try? audioFile?.write(from: buffer) // Èü≥Â£∞„ÇíÊõ∏„ÅçËæº„Åø
            silenceStart = nil
            isSpeaking   = true
        } else if isSpeaking {
            // ‚îÄ ÁÑ°Èü≥ÈñãÂßã ‚îÄ
            if silenceStart == nil { silenceStart = now }
            // ÁÑ°Èü≥„Åå‰∏ÄÂÆöÊôÇÈñìÁ∂ö„ÅÑ„Åü„Çâ„Çª„Ç∞„É°„É≥„Éà„ÇíÁ¢∫ÂÆö
            if let s0 = silenceStart, now.timeIntervalSince(s0) > silenceWindow {
                finalizeSegment()
                isSpeaking = false
            }
        }
    }

    // openNewSegment, finalizeSegment, resetState „ÅØ VAD Áâà„Å®ÂêåÊßò
    private func openNewSegment(format: AVAudioFormat) {
        let recordingFormat = AVAudioFormat(
            commonFormat: .pcmFormatInt16,
            sampleRate: 16_000,
            channels: 1,
            interleaved: true
        )!

        let fileURL = FileManager.default.temporaryDirectory
            .appendingPathComponent(UUID().uuidString)
            .appendingPathExtension("wav")

        audioFile = try? AVAudioFile(
            forWriting: fileURL,
            settings: recordingFormat.settings,
            commonFormat: recordingFormat.commonFormat,
            interleaved: recordingFormat.isInterleaved
        )
        self.fileURL = fileURL
    }

    private func finalizeSegment() {
        guard let url = fileURL else { return }

        let bytes = (try? FileManager.default.attributesOfItem(atPath: url.path)[.size]
                     as? NSNumber)?.intValue ?? 0

        if bytes < minSegmentBytes { // Ê•µÁü≠ or ÁÑ°Èü≥„Éï„Ç°„Ç§„É´„ÅØÁ†¥Ê£Ñ
            try? FileManager.default.removeItem(at: url)
            resetState()
            return
        }

        audioFile    = nil
        fileURL      = nil
        silenceStart = nil
        delegate?.recorder(self, didFinishSegment: url, start: startDate)
        startDate    = Date()
    }

    private func resetState() {
        audioFile    = nil
        fileURL      = nil
        silenceStart = nil
        startDate    = Date()
    }

    deinit { /* ‰Ωï„ÇÇ‰∏çË¶Å */ }
}
